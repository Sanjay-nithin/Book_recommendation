# Generated by Django 3.2.25 on 2025-10-03 16:10

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=255)),
                ('author', models.CharField(default='', max_length=255)),
                ('isbn', models.CharField(default='', max_length=20, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('cover_image', models.URLField(blank=True, default='', max_length=500)),
                ('publish_date', models.DateField(blank=True, null=True)),
                ('rating', models.FloatField(default=0.0)),
                ('liked_percentage', models.FloatField(default=0.0)),
                ('genres', models.JSONField(default=list)),
                ('language', models.CharField(default='English', max_length=50)),
                ('page_count', models.IntegerField(default=0)),
                ('is_free', models.BooleanField(default=False)),
                ('publisher', models.CharField(blank=True, default='', max_length=255)),
                ('buy_now_url', models.URLField(blank=True, default='', max_length=500)),
                ('preview_url', models.URLField(blank=True, default='', max_length=500)),
                ('download_url', models.URLField(blank=True, default='', max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(default='', max_length=150)),
                ('last_name', models.CharField(default='', max_length=150)),
                ('username', models.CharField(default='', max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('preferred_language', models.CharField(default='English', max_length=50)),
                ('notifications_enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_genres', models.ManyToManyField(blank=True, related_name='users', to='books.Genre')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('saved_books', models.ManyToManyField(blank=True, related_name='saved_by_users', to='books.Book')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
